
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

# for colored text see https://www.geeksforgeeks.org/change-the-color-of-certain-words-in-the-tkinter-text-widget/

import webbrowser
import sys
import urllib.parse
import os
import pandas as pd
from pathlib import Path
from matplotlib.figure import Figure 
from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg,  
NavigationToolbar2Tk) 
from matplotlib import cm
# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, filedialog
import tkinter as tk
import DLSfunctions as DLSf
import DLSLib as DL
import os
import subprocess
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D # <--- This is important for 3d plotting 
import numpy as np
import re
from tqdm import tqdm
import time
import ilt
import copy
import warnings
warnings.filterwarnings("ignore")

plt.rcParams.update({
    "text.usetex": True,
    "font.family": "serif",
    "font.size":20,
    "font.serif": ["Palatino"],
})

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"/home/christian/Documents/test_tkdesigner/build_main/assets/frame0")

DLS=[]
Tlimits=[]
dT=1.25
#%% define Status variables
Status={'loaded':0,
        'fitted':0,
        'coloridx':2}

checkbox_vars_fits = {}
checkbox_vars_fits_fp = {}
checkbox_vars_fits_sample = {}
FitRB=[]
selected_option=[]
def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)
#%% return color for gui
def read_guicolors_file(filename="guicolors.txt"):
    if not os.path.exists(filename):
        try:
            logentry(f"File '{filename}' not found.")
        except:
            print(f"File '{filename}' not found.")
        return define_colors(0)

    with open(filename, 'r') as f:
        lines = f.read().splitlines()
    return lines

def is_valid_hex_color(code):
    return bool(re.fullmatch(r"#([A-Fa-f0-9]{6})", code))

def get_valid_guicolors():
    lines = read_guicolors_file()
    if lines is None:
        raise FileNotFoundError("guicolors.txt does not exist.")

    if len(lines) != 6:
        raise ValueError(f"Expected 6 lines, found {len(lines)}.")

    for i, line in enumerate(lines):
        if not is_valid_hex_color(line):
            raise ValueError(f"Line {i + 1} is not a valid color code: '{line}'")

    return lines

def define_colors(idx):
    if idx==0:# light mode
        color=["#FFFFFF", #0 main color (default white #FFFFFF)
               "#D9D9D9", #1 color of plotting background (default grey #D9D9D9)
               "#4CAF50", #2 color of button not hovered (default green #4CAF50)
               "#45a049",#3 color of button hovered (default dark green #45a049)
               "#4D00FF",#4 color of boxes (default blue #4D00FF)
               "#000716",#5 color of text (default black #000716)
               ]
    elif idx==1: #dark mode
        color=["black", #0 main color (default white #FFFFFF)
               "#06035e", #1 color of plotting background (default grey #D9D9D9)
               "#0f0c76", #2 color of button not hovered (default green #4CAF50)
               "#08056a",#3 color of button hovered (default dark green #45a049)
               "#0a5401",#4 color of boxes (default blue #4D00FF)
               "#7a7a7a",#5 color of text (default black #000716)
               ]
    else:
        color=get_valid_guicolors()
    return color

color=define_colors(Status['coloridx'])
if os.path.exists('PyDLSsettings.txt'):
    file='PyDLSsettings.txt'
    with open(file, 'r') as f:
        for line in f:
                line = str(line.strip())
                if not line or ':' not in line:
                    continue  # skip blank or malformed lines
                key, value = line.split(':', 1)
                Status[key.strip()] = value.strip()
else:
    print('No file "PyDLSsettings.txt" found.')
def changecolors():
    if Status['coloridx']==2:
        Status['coloridx']=0
    else:
        Status['coloridx']+=1
    color=define_colors(Status['coloridx'])
    for button in [button_fitmodel,button_fit,button_loaddata,
                   button_savehdf,button_savexls,button_Zenodo,button_summaries,button_Help,
                   button_Contact,button_qdependentFit]:
        button["set_bg"](color[2])
        button["set_hover"](color[3])
        button["canvas"].config(bg=color[4])
    for button in [button_saveplot]:
        button["set_bg"](color[2])
        button["set_hover"](color[3])
        button["canvas"].config(bg=color[1])
    for rect in [rect_contact,rect_save,rect_fitmdl,rect_data,rect_pltinterfce]:
        rect["set_fill"](color[4])
    for rect in [rect_logs,rect_plot]:
        rect["set_fill"](color[1])
    entry_1.config(bg=color[0],fg=color[5])
    canvasmain.config(bg = color[0])
    widget.configure(bg = color[1])
    for sb in [canvasfits,canvasfitsrb,canvasfits_fp]:
        sb.config(bg=color[1])
    
#%% define round corner rectangles
# based on  https://stackoverflow.com/questions/44099594/how-to-make-a-tkinter-canvas-rectangle-with-rounded-corners
# def round_rectangle(x1, y1, x2, y2, radius=25, **kwargs):

def round_rectangle(canvas,x1, y1, x2, y2, radius=25, **kwargs):
    points = [
        x1 + radius, y1,
        x1 + radius, y1,
        x2 - radius, y1,
        x2 - radius, y1,
        x2, y1,
        x2, y1 + radius,
        x2, y1 + radius,
        x2, y2 - radius,
        x2, y2 - radius,
        x2, y2,
        x2 - radius, y2,
        x2 - radius, y2,
        x1 + radius, y2,
        x1 + radius, y2,
        x1, y2,
        x1, y2 - radius,
        x1, y2 - radius,
        x1, y1 + radius,
        x1, y1 + radius,
        x1, y1
    ]
    shape_id = canvas.create_polygon(points, smooth=True, **kwargs)

    # Return a dictionary with helpers
    return {
        "id": shape_id,
        "set_fill": lambda color: canvas.itemconfig(shape_id, fill=color),
        "set_outline": lambda color: canvas.itemconfig(shape_id, outline=color),
        "canvas": canvas
    }

#%% define rounded button

def create_rounded_button(parent, x, y, width, height, text, command,
                          radius=20, bg=color[2],cc=color[4], hover_bg=color[3],
                          fg="white", font=("Arial", 12, "bold")):
    global canvas  # Needed so round_rectangle uses this canvas
    # Track colors in a dict
    color_state = {
        "normal": bg,
        "hover": hover_bg,
        "cc":cc
    }
    # Create a canvas to act as the button
    button_canvas = tk.Canvas(parent, width=int(width), height=int(height), bg=color_state['cc'], highlightthickness=0)
    button_canvas.place(x=int(x), y=int(y))

    # Set the global canvas variable for round_rectangle to use
    canvas = button_canvas

    # Draw the rounded rectangle
    rounded = round_rectangle(canvas,0, 0, width, height, radius=radius, fill=bg, outline="")
    bg_id = rounded["id"]
    # Add text inside the same canvas
    text_id = button_canvas.create_text(width / 2, height / 2, text=text, fill=fg, font=font)

    # Event bindings
    def on_click(event):
        if command:
            command()

    def on_enter(event):
        button_canvas.itemconfig(bg_id, fill=color_state["hover"])

    def on_leave(event):
        button_canvas.itemconfig(bg_id, fill=color_state["normal"])

    for item in (bg_id, text_id):
        button_canvas.tag_bind(item, "<Button-1>", on_click)
        button_canvas.tag_bind(item, "<Enter>", on_enter)
        button_canvas.tag_bind(item, "<Leave>", on_leave)

    return {
        "canvas": button_canvas,
        "bg_id": rounded["id"],
        "color_state": color_state,
        "set_bg": lambda color: (rounded["set_fill"](color),color_state.update({"normal": color})),
        "set_hover": lambda color: color_state.update({"hover": color})
    }

#%% define choose model 
def choose_fit_models():
    result = {}

    def on_submit():
        result['values'] = (
            var0.get(),var1.get(), var2.get(), var3.get(),
            var4.get(), var5.get(), var6.get(), var7.get()
        )
        choicewindow.quit()  # Exit the mainloop
        choicewindow.destroy()

    choicewindow = tk.Toplevel()
    choicewindow.title("Choose Fit Models")

    var0,var1, var2, var3, var4, var5, var6, var7 = [tk.IntVar() for _ in range(8)]

    labels = [
        'Contin',
        'single exponential',
        'single exponential norm',
        'double exponential',
        'double exponential norm',
        'exponential and stretched norm',
        'stretched stretched norm',
        'gaussian distribution'
    ]
    variables = [var0, var1, var2, var3, var4, var5, var6, var7]

    for i, (label, var) in enumerate(zip(labels, variables)):
        tk.Checkbutton(choicewindow, text=label, variable=var).grid(row=i, column=0, sticky='w')

    tk.Button(choicewindow,
              text="Submit",
              command=on_submit,
              font=("Arial", 12),
              width=15,
              padx=10, pady=5
              ).grid(row=8, column=0, sticky='w')

    choicewindow.mainloop()

    return result.get('values', (0, 0, 0, 0, 0, 0, 0))

#%% define plotting routine
def update(*args):
    chklegend.place(x=880, y=70)
    button_saveplot['canvas'].place(x=750,y=50,width=100,height=50)
    selectedPlot=selected_Plot.get()
    ax.cla()
    ax.set_aspect('auto')
    sliderSample.config(to=len(DLS)-1)
    hiS=sliderSample.get()
    sliderq.config(to=len(DLS[hiS]['RedData'])-1)
    hiq=sliderq.get()
    if selectedPlot=='g':#correlation function
        tau=DLS[hiS]['RedData'][hiq]['tau']
        ax.errorbar(tau,DLS[hiS]['RedData'][hiq]['g2m1'],DLS[hiS]['RedData'][hiq]['dg2m1'],label='data')
        if Status['fitted']==1:
            if 'Contin' in checkbox_vars_fits.keys():
                hidmin=-1
                if checkbox_vars_fits['Contin'].get():
                    ax.plot(tau,DLS[hiS]['RedData'][hiq]['Contin']['decay'],label='Contin',zorder=10)
            else:
                hidmin=0
            for hid,key in enumerate(checkbox_vars_fits):
                hdev=hid+hidmin
                if checkbox_vars_fits[key].get():
                    if hidmin==-1 and hid==0:
                        pass
                    else:
                        Fit=DLS[hiS]['RedData'][hiq]['Fit'][hdev]
                        ax.plot(tau,Fit['LMFit'].eval(),label=Fit['Name']+r'\\ $\chi^2_{red}$='+"{:.2f}".format(Fit['redchi']),zorder=10)
        ax.set_xscale('log')
        ax.set_ylim([-0.1,1.5])
        ax.set_xlabel(r'$\tau$ [ms]')
        ax.set_ylabel(r'g$_2$-1')
    elif selectedPlot=='q':#q dependence of parameters
        Sample=DLS[hiS]
        q=[]
        for RedData in Sample['RedData']:
            q.append(RedData['q'][0])
        q=np.array(q)
        if selected_optionq_q2.get()=='q2':
            x=q**2
        else:
            x=q
        for hip,par in enumerate(checkbox_vars_fits_fp):
            if checkbox_vars_fits_fp[par].get():
                Param=[]
                Error=[]
                for hiq,_ in enumerate(Sample['RedData']):
                    selectedfit=selected_option[-1].get()
                    hirb=-1
                    for hi,Fit in enumerate(Sample['RedData'][hiq]['Fit']):
                        if Fit['Name']==selectedfit:
                            hirb=hi
                    lmmodel=Sample['RedData'][hiq]['Fit'][hirb]['LMFit']
                    Param.append(lmmodel.params[par].value)
                    Error.append(lmmodel.params[par].stderr)
                ax.errorbar(x,Param,Error,fmt='o',label=par)
                # check now if there are fits and show them
                if 'Fit' in Sample.keys():
                    for fits in Sample['Fit']:
                        selectedfit=selected_option[-1].get()
                        if (fits['Parameterpath'].split('/')[0]==selectedfit):
                            if (fits['Parameterpath'].split('/')[1]==par):
                                ax.plot(x,fits['LMFit'].eval(q=q),label=fits['Name']+' ' +par)
        if selected_optionq_q2.get()=='q2':
            ax.set_xlabel(r'$q^2$')
        else:
            ax.set_xlabel(r'$q$')
    elif selectedPlot=='s':#s dependence of parameters
        x=range(len(DLS))
        for hip,par in enumerate(checkbox_vars_fits_sample):
            if checkbox_vars_fits_sample[par].get():
                Param=[]
                Error=[]
                for temp in DLS:
                    Param.append(temp['Fit'][int(par.split(': ')[0])]['LMFit'].params[par.split(': ')[-1]].value)
                    Error.append(temp['Fit'][int(par.split(': ')[0])]['LMFit'].params[par.split(': ')[-1]].stderr)
                ax.errorbar(x,Param,Error,fmt='o',label=par)
    if legendcheckbox.get():
        ax.legend(framealpha=0)
    canvas1.draw()

def create_checkboxes(container, items, variables):
    # Clear previous variables
    for widget in scrollable_frame.winfo_children():
        widget.destroy()

    for item in items:
        var = tk.BooleanVar()
        chk = tk.Checkbutton(scrollable_frame, text=item, variable=var,command=update)
        chk.pack(anchor='w')
        variables[item] = var

def create_radiobuttons(container, items, selected_var):
    # Clear previous widgets
    for widget in scrollable_frame_rb.winfo_children():
        widget.destroy()
    for item in items:
        rb = tk.Radiobutton(scrollable_frame_rb, text=item, variable=selected_var, value=item, command=updaterb)
        rb.pack(anchor='w')
        FitRB.append(rb)
        selected_option.append(selected_var)

def updaterb():
    index=[fit['Name'] for fit in DLS[0]['RedData'][0]['Fit']].index(selected_option[-1].get())
    initial_items_all = DLS[0]['RedData'][0]['Fit'][index]['LMFit'].params.keys()
    initial_items=[]#list(initial_items_all)[0]
    for key in initial_items_all:
        if DLS[0]['RedData'][0]['Fit'][index]['LMFit'].params[key].vary:
            initial_items.append(key)
    create_checkboxes_fitparams(checkbox_frame,initial_items, checkbox_vars_fits_fp)
    ax.cla()
    canvas1.draw()

def create_checkboxes_fitparams(container, items, variables):
    # Clear previous variables
    for widget in scrollable_frame_fp.winfo_children():
        widget.destroy()

    for item in items:
        var = tk.BooleanVar()
        chk = tk.Checkbutton(scrollable_frame_fp, text=item, variable=var,command=update)
        chk.pack(anchor='w')
        variables[item] = var

def updateSamplefits():
    SampleFitParameters=[]
    for hif,fits in enumerate(DLS[0]['Fit']):
        for key in fits['LMFit'].params.keys():
            SampleFitParameters.append(str(hif)+': '+fits['Parameterpath']+ ': '+key)
    
    # index=[fit['Name'] for fit in DLS[0]['RedData'][0]['Fit']].index(selected_option[-1].get())
    # initial_items_all = DLS[0]['RedData'][0]['Fit'][index]['LMFit'].params.keys()
    # initial_items=[]#list(initial_items_all)[0]
    # for key in initial_items_all:
    #     if DLS[0]['RedData'][0]['Fit'][index]['LMFit'].params[key].vary:
    #         initial_items.append(key)
    create_checkboxes_SampleFit(checkbox_frame_sample,SampleFitParameters, checkbox_vars_fits_sample)
    ax.cla()
    canvas1.draw()

def create_checkboxes_SampleFit(container, items, variables):
    # Clear previous variables
    for widget in scrollable_frame_sample.winfo_children():
        widget.destroy()

    for item in items:
        var = tk.BooleanVar()
        chk = tk.Checkbutton(scrollable_frame_sample, text=item, variable=var,command=update)
        chk.pack(anchor='w')
        variables[item] = var
#%% define mails depending on operation system (based on ChatGPT)

def open_email(recipient='', subject='', body=''):
    canvas.itemconfig(1, fill='red')
    subject = urllib.parse.quote(subject)  # Encode spaces and special characters
    body = urllib.parse.quote(body)

    mailto_link = f"mailto:{recipient}?subject={subject}&body={body}"

    if sys.platform == "darwin":  # macOS
        os.system(f"open '{mailto_link}'")
    elif sys.platform == "linux":  # Linux
        os.system(f"xdg-open '{mailto_link}'")
    else:  # Windows (default)
        webbrowser.open(mailto_link)
#%% save as xls
def SaveXLS():
    file_path = filedialog.asksaveasfilename(defaultextension=".xlsx",filetypes=[
               ("Exel sheets", "*.xlsx"),
               ("All files", "*.*")])
    print("Sample overview still to be written!")
    # with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
    #     dic={}
        
    # if 'Fit' in DLS[0].keys():
    #     dic={'Sample':[],'Temperature':[]}
    #     for fit in DLS[0]['Fit']:
    #         dic.update({})
    #         for Sample in DLS:
    #         for hif,Fit in enumerate(Sample['Fit']):
    #             if hif==0:
                    
    #             dic['Sample'].append(Sample['Name'])
    #             temps=[redD['T'] for redD in Sample['RedData']]
    #             dic['Temperature'].append(np.mean([value for sublist in temps for value in sublist]))
    #             dic['Fit'].append(Fit['Name'])
    #             dic['q_dependent_Parameter'].append(Fit['Parameterpath'])
    #             for 
    with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
        for hif,fits in enumerate(DLS[0]['RedData'][0]['Fit']):
            dic={'Sample':[]}
            for params in fits['LMFit'].params.keys():
                dic.update({params:[]})
                if fits['LMFit'].params[params].vary==True:
                    dic.update({'d_'+params:[]})
            for Sample in DLS:
                for redDat in Sample['RedData']:
                    dic['Sample'].append(Sample['Name'])
                    for key in dic.keys():
                        if key!="Sample":
                            if 'd_' not in key:
                                dic[key].append(redDat['Fit'][hif]['LMFit'].params[key].value)
                            else:
                                dic[key].append(redDat['Fit'][hif]['LMFit'].params[key[2:]].stderr)
            df=pd.DataFrame(dic)
            df.to_excel(writer, sheet_name=fits['Name'], index=False)
            
#%% define now functions of buttons
def logentry(text):
    entry_1['state'] = 'normal'
    entry_1.insert(tk.END,'\n '+text)
    entry_1['state'] = 'disabled'
def entry1Warning(val):
    entry_1['state'] = 'normal'
    warning='\n Warning: '+val
    entry_1.insert(tk.END,warning)
    num_lines = int(entry_1.index("end-1c").split('.')[0])
    entry_1.tag_add('Warning',f'{num_lines}.0',f'{num_lines}.{len(warning)}')
    entry_1.tag_config("Warning", background="black",foreground="red") 
    entry_1['state'] = 'disabled'
#%% Button 1: LoadData
def LoadData(Tlimits):
    logentry('Start Loading Data')
    if entry_4.get()=='':
        entry1Warning('Provide Folder!')
        folder_selected = filedialog.askdirectory()
        entry_4.insert(tk.END,folder_selected)
        logentry('Folder Selected!')
    Tlimits.append(DLSf.loaddata(folder_selected,DLS))
    update()
    Status['loaded']=1
    
def Fitqdependence():
    parameterschecked=0
    parameters=[]
    for hip,par in enumerate(checkbox_vars_fits_fp):
        if checkbox_vars_fits_fp[par].get():
            parameterschecked+=1
            parameters.append(par)
    if parameterschecked!=1:
        entry1Warning('Make sure that exactly 1 parameter is marked!')
        return
    logentry('Launched Custom Fit')
    model,params,name=DLSf.customfitmodel(independent='q')
    logentry('Start fitting')
    parampath=selected_option[-1].get()+'/'+parameters[0]
    for Sample in DLS:
        if 'Fit' not in Sample.keys():
            Sample.update({'Fit':[]})
        values=[]
        errors=[]
        q=np.array([Red['q'][0] for Red in Sample['RedData']])
        for hiq,_ in enumerate(q):
            fitnames=[fit['Name'] for fit in Sample['RedData'][hiq]['Fit']]
            fit=Sample['RedData'][hiq]['Fit'][fitnames.index(selected_option[-1].get())]['LMFit']
            values.append(fit.params[parameters[0]].value)
            errors.append(fit.params[parameters[0]].stderr)
        values=np.array(values)
        weights=1/np.array(errors)
        modelresult=model.fit(values,q=q,params=params,weights=weights)
        Sample['Fit'].append({'Name':name,
                               'Parameterpath':parampath,
                               'LMFit':modelresult})
    logentry('Fits Done')
    update()
    SampleFitParameters=[]
    for hif,fits in enumerate(DLS[0]['Fit']):
        for key in fits['LMFit'].params.keys():
            SampleFitParameters.append(str(hif)+': '+fits['Parameterpath']+ ': '+key)
    create_checkboxes_SampleFit(checkbox_frame_sample, SampleFitParameters, checkbox_vars_fits_sample)
#%% Fit
def FitmodelChoice():    
    logentry('Launch Fit Model Choice')
    if Status['loaded']==0:
        entry1Warning('Load Data first!')
    else:
        Models=choose_fit_models()
        modelstr=''
        for Model in zip(Models,['Contin','singleexponential','singleexponentialnorm','doubleexponential','doubleexponentialnorm','normalandstretchednorm','stretchedstretchednorm','gaussdistexpnorm']):
            if Model[0]==1:
                modelstr+=Model[1]+','
        entry_3.insert(tk.END,modelstr[:-1])
    
def RunFit():
    logentry('Start Fits')
    if Status['loaded']==0:
        entry1Warning('Load Data first!')
    elif entry_3.get()=='': 
        entry1Warning('Provide Fit Models!')
        FitmodelChoice()
        RunFit()
    else:
        DLSf.fitting(entry_3.get(),DLS,Tlimits[0],dT)
        Status['fitted']=1
    
    update()
    initial_items = entry_3.get().split(',')
    create_checkboxes(checkbox_frame, initial_items, checkbox_vars_fits)
    try:
        initial_items.remove('Contin')
    except:
        pass
    selected_opt = tk.StringVar(value=initial_items[0])
    create_radiobuttons(radiobutton_frame, initial_items,selected_opt)
#%% Help Contact
def Contact():
    logentry('Contact')
    open_email("christianbeck91@gmx.de", "[PyDLS]: Support Request", "")
    

def Help():
    logentry('Help')
    webbrowser.open("google.de", new=1)
    
    
#%% save data
def SaveHDF():
    file_path = filedialog.asksaveasfilename(defaultextension=".hdf",filetypes=[
               ("HDF files", "*.hdf"),
               ("All files", "*.*")])
    if file_path:
        DL.savehdf(file_path,DLS)
        
        entry_1.insert(tk.END,f"Data saved to {file_path}")
        Status.update({'HDFFile':file_path})
def LoadHDF():
    file_path = filedialog.askopenfilename(defaultextension=".hdf",filetypes=[
               ("HDF files", "*.hdf"),
               ("All files", "*.*")])
    if file_path:
        temp=DL.loadhdf(file_path)
        for t in temp:
            DLS.append(t)
    update()
    #%% compile Summaries
def CompileSummaries():
    logentry('\n######################\n###compile summaries##\n######################\n')
    for DLSmeas in DLS:
        DL.writesummary('Summaries/' + DLSmeas['Name'] + '.tex',r'\end{document}')
        os.chdir('Summaries')
        try:
            os.system('xelatex ' + DLSmeas['Name'] + '.tex >/dev/null')
            os.system('xelatex ' + DLSmeas['Name'] + '.tex >/dev/null')
        except:
            logentry('Compiling of ' + DLSmeas['Name'] + '.tex  failed!')
        os.chdir('..')

#%% save current figure
def save_plot():
    # Ask the user where to save the file
    file_path = filedialog.asksaveasfilename(defaultextension=".pdf",
                                             filetypes=[("pdf files", "*.pdf"),
                                                        ("eps files", "*.eps"),
                                                        ("PNG files", "*.png"),
                                                        ("All files", "*.*")])
    if file_path:
        fig.savefig(file_path,bbox_inches='tight')
        
        entry_1.insert(tk.END,f"Plot saved to {file_path}")
        
#%% select plotting interface
def selectplot():
    ax.cla()
    canvas1.draw()
    selectedPlot=selected_Plot.get()
    if (selectedPlot=='q') or (selectedPlot=='s'): # hide plot interface from g2-1 "g"
        for ob in [RBqq2[0],RBqq2[1],sliderSample,radiobutton_frame,sliderq,checkbox_frame,button_qdependentFit['canvas'],checkbox_frame_fp,checkbox_frame_sample]:
            ob.place_forget()
    elif (selectedPlot=='g') or (selectedPlot=='s'): # hide plot interface from q dependence "q"
        for ob in [RBqq2[0],RBqq2[1],radiobutton_frame,checkbox_frame_fp,button_qdependentFit['canvas'],checkbox_frame_sample]:
            ob.place_forget()
    elif (selectedPlot=='g') or (selectedPlot=='q'): # hide plot interface from sample dependence "s"
        for ob in [RBqq2[0],RBqq2[1],radiobutton_frame,checkbox_frame_fp,button_qdependentFit,checkbox_frame_sample]:
            ob.place_forget()
    if selectedPlot=='s':
        checkbox_frame_sample.place(x=720, y=600, width=300)
        logentry('change to sample-dependent plots')
    elif selectedPlot=='q':
        logentry('change to q-dependent plots')
        sliderSample.place(x=720, y=600, width=655/3)
        radiobutton_frame.place(x=720+655/3+10, y=600, width=655/3)
        RBqq2[0].place(x=720,y=670)
        RBqq2[1].place(x=770,y=670)
        checkbox_frame_fp.place(x=720+2*655/3+20, y=600, width=655/3)
        button_qdependentFit['canvas'].place(x=252.0,y=483.0,width=193.0,height=51.0)
    elif selectedPlot=='g':
        logentry('change to g2-1 plots')
        try:
            update()
        except:
            entry1Warning('Error while plotting data! Data loaded?')
        sliderSample.place(x=720, y=600, width=655/3)
        sliderq.place(x=720+655/3+10, y=600, width=655/3)
        checkbox_frame.place(x=720+2*655/3+20, y=600, width=655/3)
    else:
        entry1Warning('Something highly went wrong!')
#%% some more functions for interface
def About():
    # Create a new window (Toplevel is a separate window)
    new_window = tk.Toplevel(window)
    new_window.title("About")
    new_window.geometry("300x200")
    
    # Long or wrapped text
    text = " Concept and Programming:\n Christian Beck, Dr. rer. nat \n\n Graphical Advice:\n Alejandra Handal\n\n Contact: christianbeck91@gmx.de"

    # Label with word wrap and padding
    label = tk.Label(new_window, text=text, font=("Arial", 12), wraplength=280, justify="left")
    label.pack(padx=10, pady=10, fill="both", expand=True)
#%% define function to push data to Zenodo
def Zenodo(DLS):
    if 'HDFFile' in Status.keys():
        metadata=DLSf.get_metadata_from_user(window,Status)
        file=Status['HDFFile']
        temp,doi=DLSf.uploadZenodo(metadata['access_token'],metadata,file,DLS)
        DLS=temp
        logentry("Data on Zenodo under doi:"+ doi)
    else:
        entry1Warning('Save Data as HDF File first!')
#%% create now interface

window = Tk()
window.title('PyQENS')
window.geometry("1420x1004")
window.configure(bg = color[0])
# Load an image (must be .gif or .png; .ico not always supported cross-platform)
icon = PhotoImage(file='./logo32x32.png')

menuleiste = tk.Menu(window)

# Datei-Menü mit Separatoren
file_menu = tk.Menu(menuleiste, tearoff=0)
file_menu.add_command(label="Save as HDF", command=SaveHDF)
file_menu.add_command(label="Save as Exel", command=SaveXLS)
file_menu.add_separator()  # <- Trennlinie
file_menu.add_command(label="Load HDF", command=LoadHDF)
menuleiste.add_cascade(label="File", menu=file_menu)

settings_menu = tk.Menu(menuleiste, tearoff=0)
settings_menu.add_command(label="Change Color Scheme", command=changecolors)
settings_menu.add_separator()  # <- Trennlinie
settings_menu.add_command(label="About", command=About)
menuleiste.add_cascade(label="Settings", menu=settings_menu)
# Set the icon
window.iconphoto(True, icon)

canvasmain = Canvas(
    window,
    bg = color[0],
    height = 1004,
    width = 1420,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvasmain.place(x = 0, y = 0)
#%%% logs
rect_logs=round_rectangle(canvasmain,
    709.0,
    703.0,
    1404.0,
    971.0,
    fill=color[1],
    outline="")

entry_1 = Text(
    bd=0,
    bg=color[0],
    fg=color[5],
    highlightthickness=0
)
entry_1.place(
    x=718.0,
    y=715.0,
    width=677.0,
    height=242.0
)

#%%% plot area for g2-1

rect_plot=round_rectangle(canvasmain,
    710.0,
    41.0,
    1405.0,
    696.0,
    fill=color[1],
    outline="")
fig, ax = plt.subplots(dpi=100)
fig.subplots_adjust(left=0.15)  # Make room for y-label
fig.patch.set_alpha(0)            # Transparent figure background
ax.set_facecolor('none')
DLSf.plotlogo(ax)
canvas1 = FigureCanvasTkAgg(fig, master=window)
canvas1.draw()
widget = canvas1.get_tk_widget()
widget.place(x=720, y=41, width=1405-710-20, height=696-41-100)  # x, y, width, height
widget.configure(bg = color[1], highlightthickness=0)


sliderSample = tk.Scale(window, from_=0, to=0, resolution=1,
                  orient="horizontal", label="Sample",
                  command=update)
sliderSample.set(0)  # initial value
sliderSample.place(x=720, y=600, width=655/3)


sliderq = tk.Scale(window, from_=0, to=0, resolution=1,
                  orient="horizontal", label="Scattering Angle",
                  command=update)
sliderq.set(0)  # initial value
sliderq.place(x=720+655/3+10, y=600, width=655/3)


# Create canvas with scrollbar for correlation plot view listing the performed fits as checkboxes
checkbox_frame = tk.Frame(window)
checkbox_frame.place(x=720+2*655/3+20, y=600, width=655/3)


canvasfits = tk.Canvas(checkbox_frame, height=75)
scrollbar = tk.Scrollbar(checkbox_frame, orient="vertical", command=canvasfits.yview)
canvasfits.configure(yscrollcommand=scrollbar.set)

scrollbar.pack(side="right", fill="y")
canvasfits.pack(side="left", fill="both", expand=True)

scrollable_frame = tk.Frame(canvasfits)
canvasfits.create_window((0, 0), window=scrollable_frame, anchor="nw")



# Configure scroll region when contents change
def on_frame_configure(event):
    canvas.configure(scrollregion=canvasfits.bbox("all"))

scrollable_frame.bind("<Configure>", on_frame_configure)



# Create canvas with scrollbar for sample plot view listing the performed fits as checkboxes
checkbox_frame_sample = tk.Frame(window)
# checkbox_frame_sample.place(x=720+2*655/3+20, y=600, width=655/3)


canvasfits_sample = tk.Canvas(checkbox_frame_sample, height=75)
scrollbar_sample = tk.Scrollbar(checkbox_frame_sample, orient="vertical", command=canvasfits_sample.yview)
canvasfits_sample.configure(yscrollcommand=scrollbar_sample.set)

scrollbar_sample.pack(side="right", fill="y")
canvasfits_sample.pack(side="left", fill="both", expand=True)

scrollable_frame_sample = tk.Frame(canvasfits_sample)
canvasfits_sample.create_window((0, 0), window=scrollable_frame_sample, anchor="nw")



# Configure scroll region when contents change
def on_frame_configure(event):
    canvas.configure(scrollregion=canvasfits_sample.bbox("all"))

scrollable_frame_sample.bind("<Configure>", on_frame_configure)



# Create canvas with scrollbar for q view listing the performed fits as radiobuttons
radiobutton_frame = tk.Frame(window)

canvasfitsrb = tk.Canvas(radiobutton_frame, height=75)
scrollbarrb = tk.Scrollbar(radiobutton_frame, orient="vertical", command=canvasfitsrb.yview)
canvasfitsrb.configure(yscrollcommand=scrollbarrb.set)

scrollbarrb.pack(side="right", fill="y")
canvasfitsrb.pack(side="left", fill="both", expand=True)

scrollable_frame_rb = tk.Frame(canvasfitsrb)
canvasfitsrb.create_window((0, 0), window=scrollable_frame_rb, anchor="nw")

# Configure scroll region when contents change
def on_frame_configure_rb(event):
    canvas.configure(scrollregion=canvasfitsrb.bbox("all"))
scrollable_frame_rb.bind("<Configure>", on_frame_configure_rb)


# Create canvas with scrollbar for correlation plot view listing the performed fits as checkboxes
checkbox_frame_fp = tk.Frame(window)


canvasfits_fp = tk.Canvas(checkbox_frame_fp, height=75)
scrollbar_fp = tk.Scrollbar(checkbox_frame_fp, orient="vertical", command=canvasfits_fp.yview)
canvasfits_fp.configure(yscrollcommand=scrollbar_fp.set)

scrollbar_fp.pack(side="right", fill="y")
canvasfits_fp.pack(side="left", fill="both", expand=True)

scrollable_frame_fp = tk.Frame(canvasfits_fp)
canvasfits_fp.create_window((0, 0), window=scrollable_frame_fp, anchor="nw")



# Configure scroll region when contents change
def on_frame_configure_fp(event):
    canvas.configure(scrollregion=canvasfits_fp.bbox("all"))

scrollable_frame_fp.bind("<Configure>", on_frame_configure_fp)



# Create a frame to contain the radiobuttons for q or q^2 plots
selected_optionq_q2 = tk.StringVar(value="q")
radio_frameq_q2 = tk.Frame(window)
radio_frameq_q2.pack(pady=20)
options_qq2 = ["q", "q2"]
RBqq2=[]
# Create radiobuttons horizontally
for option in zip(options_qq2,[720,770]):
    rqq2 = tk.Radiobutton(
            window,
            text=option[0],
            value=option[0],
            variable=selected_optionq_q2,
            bg=color[1],
            fg=color[5],
            highlightthickness=0,
            command=update
        )
    RBqq2.append(rqq2)
# Create Checkbox for legend
legendcheckbox = tk.BooleanVar()
chklegend = tk.Checkbutton(window, text='Legend', variable=legendcheckbox,command=update)

#%%% Contact and Info
rect_contact=round_rectangle(canvasmain,
    44.0,
    761.0,
    653.0,
    925.0,
    fill=color[4],
    outline="")

#%%% Save Results
rect_save=round_rectangle(canvasmain,
    44.0,
    581.0,
    653.0,
    745.0,
    fill=color[4],
    outline="")

canvasmain.create_text(
    62.0,
    603.0,
    anchor="nw",
    text="Save Results:",
    fill=color[0],
    font=("Inter", 12 * -1)
)

#%%% define plot interface
rect_pltinterfce=round_rectangle(canvasmain,
    44.0,
    401.0,
    653.0,
    565.0,
    fill=color[4],
    outline="")

canvasmain.create_text(
    62.0,
    423.0,
    anchor="nw",
    text="Plot results:",
    fill=color[0],
    font=("Inter", 12 * -1)
)

selected_Plot = tk.StringVar(value='g')
Plots = ((r'correlation function', 'g',50),
         (r'q-dependence', 'q',200),
         (r'sample dependence', 's',350))

# radio buttons
for Plot in Plots:
    r = tk.Radiobutton(
        window,
        selectcolor="blue",
        text=Plot[0],
        value=Plot[1],
        variable=selected_Plot,
        bg=color[4],
        fg='white',
        highlightthickness=0,
        command=selectplot
    )
    r.place(x=Plot[2],y=450)
#%%% Fit Models
rect_fitmdl=round_rectangle(canvasmain,
    44.0,
    221.0,
    653.0,
    385.0,
    fill=color[4],
    outline="")

canvasmain.create_text(
    62.0,
    243.0,
    anchor="nw",
    text="Choose Fit Model:",
    fill=color[0],
    font=("Inter", 12 * -1)
)

entry_3 = Entry(
    bd=0,
    bg=color[0],
    fg=color[5],
    highlightthickness=0
)
entry_3.place(
    x=62.0,
    y=265.0,
    width=528.0,
    height=20.0
)

#%%% Data Repository
rect_data=round_rectangle(canvasmain,
    44.0,
    41.0,
    653.0,
    205.0,
    fill=color[4],
    outline="")

canvasmain.create_text(
    62.0,
    63.0,
    anchor="nw",
    text="Data Repository:",
    fill=color[0],
    font=("Inter", 12 * -1)
)

entry_4 = Entry(
    bd=0,
    bg=color[0],
    fg=color[5],
    highlightthickness=0
)
entry_4.place(
    x=64.0,
    y=85.0,
    width=569.0,
    height=20.0
)
# load data button
button_fitmodel=create_rounded_button(window,597.0,265.0,36.0,22.0,'>>',lambda: FitmodelChoice())
button_fit=create_rounded_button(window,252.0,303.0,193.0,51.0,'Perform Fit',lambda: RunFit())
button_loaddata=create_rounded_button(window,250.0,123.0,193.0,51.0,"Load Data",lambda: LoadData(Tlimits))
button_saveplot=create_rounded_button(window,750,50,100,50,"Save Plot",save_plot,cc=color[1])
button_saveplot['canvas'].place_forget()
button_savehdf=create_rounded_button(window,60.0,620.0,180.0,51.0,"Save HDF",lambda: SaveHDF())
button_savexls=create_rounded_button(window,260.0,620.0,180.0,51.0,"Save XLS",lambda: SaveXLS())
button_summaries=create_rounded_button(window,460.0,620.0,180.0,51.0,"Compile Summaries",lambda: CompileSummaries())
button_Zenodo=create_rounded_button(window,260.0,680.0,180.0,51.0,"Publish on Zenodo",lambda: Zenodo(DLS))
button_Help=create_rounded_button(window,209.0,797.0,91.0,91.0,'Help',lambda: Help())
button_Contact=create_rounded_button(window,397.0,797.0,91.0,91.0,'Contact',lambda: Contact())
button_qdependentFit=create_rounded_button(window,252.0,483.0,193.0,51.0,'Fit q dependence',lambda: Fitqdependence())
button_qdependentFit['canvas'].place_forget()

window.resizable(False, False)
window.config(menu=menuleiste)
window.mainloop()
plt.close()
